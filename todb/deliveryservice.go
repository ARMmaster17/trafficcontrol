// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_goto2.go (add link), as a start
// of the Traffic Ops golang data model

package todb

import (
	"encoding/json"
	"fmt"
	"gopkg.in/guregu/null.v3"
	"time"
)

type Deliveryservice struct {
	Id                   int64       `db:"id" json:"id"`
	XmlId                string      `db:"xml_id" json:"xmlId"`
	Active               int64       `db:"active" json:"active"`
	Dscp                 int64       `db:"dscp" json:"dscp"`
	Signed               null.Int    `db:"signed" json:"signed"`
	QstringIgnore        null.Int    `db:"qstring_ignore" json:"qstringIgnore"`
	GeoLimit             null.Int    `db:"geo_limit" json:"geoLimit"`
	HttpBypassFqdn       null.String `db:"http_bypass_fqdn" json:"httpBypassFqdn"`
	DnsBypassIp          null.String `db:"dns_bypass_ip" json:"dnsBypassIp"`
	DnsBypassIp6         null.String `db:"dns_bypass_ip6" json:"dnsBypassIp6"`
	DnsBypassTtl         null.Int    `db:"dns_bypass_ttl" json:"dnsBypassTtl"`
	OrgServerFqdn        null.String `db:"org_server_fqdn" json:"orgServerFqdn"`
	Type                 int64       `db:"type" json:"type"`
	Profile              int64       `db:"profile" json:"profile"`
	CdnId                int64       `db:"cdn_id" json:"cdnId"`
	CcrDnsTtl            null.Int    `db:"ccr_dns_ttl" json:"ccrDnsTtl"`
	GlobalMaxMbps        null.Int    `db:"global_max_mbps" json:"globalMaxMbps"`
	GlobalMaxTps         null.Int    `db:"global_max_tps" json:"globalMaxTps"`
	LongDesc             null.String `db:"long_desc" json:"longDesc"`
	LongDesc1            null.String `db:"long_desc_1" json:"longDesc1"`
	LongDesc2            null.String `db:"long_desc_2" json:"longDesc2"`
	MaxDnsAnswers        null.Int    `db:"max_dns_answers" json:"maxDnsAnswers"`
	InfoUrl              null.String `db:"info_url" json:"infoUrl"`
	MissLat              null.Float  `db:"miss_lat" json:"missLat"`
	MissLong             null.Float  `db:"miss_long" json:"missLong"`
	CheckPath            null.String `db:"check_path" json:"checkPath"`
	LastUpdated          time.Time   `db:"last_updated" json:"lastUpdated"`
	Protocol             null.Int    `db:"protocol" json:"protocol"`
	SslKeyVersion        null.Int    `db:"ssl_key_version" json:"sslKeyVersion"`
	Ipv6RoutingEnabled   null.Int    `db:"ipv6_routing_enabled" json:"ipv6RoutingEnabled"`
	RangeRequestHandling null.Int    `db:"range_request_handling" json:"rangeRequestHandling"`
	EdgeHeaderRewrite    null.String `db:"edge_header_rewrite" json:"edgeHeaderRewrite"`
	OriginShield         null.String `db:"origin_shield" json:"originShield"`
	MidHeaderRewrite     null.String `db:"mid_header_rewrite" json:"midHeaderRewrite"`
	RegexRemap           null.String `db:"regex_remap" json:"regexRemap"`
	Cacheurl             null.String `db:"cacheurl" json:"cacheurl"`
	RemapText            null.String `db:"remap_text" json:"remapText"`
	MultiSiteOrigin      null.Int    `db:"multi_site_origin" json:"multiSiteOrigin"`
	DisplayName          string      `db:"display_name" json:"displayName"`
	TrResponseHeaders    null.String `db:"tr_response_headers" json:"trResponseHeaders"`
	InitialDispersion    null.Int    `db:"initial_dispersion" json:"initialDispersion"`
	DnsBypassCname       null.String `db:"dns_bypass_cname" json:"dnsBypassCname"`
	TrRequestHeaders     null.String `db:"tr_request_headers" json:"trRequestHeaders"`
}

func handleDeliveryservice(method string, id int, payload []byte) (interface{}, error) {
	if method == "GET" {
		ret := []Deliveryservice{}
		if id >= 0 {
			err := globalDB.Select(&ret, "select * from deliveryservice where id=$1", id)
			if err != nil {
				fmt.Println(err)
				return nil, err
			}
		} else {
			queryStr := "select * from deliveryservice"
			err := globalDB.Select(&ret, queryStr)
			if err != nil {
				fmt.Println(err)
				return nil, err
			}
		}
		return ret, nil
	} else if method == "POST" {
		var v Asn
		err := json.Unmarshal(payload, &v)
		if err != nil {
			fmt.Println(err)
		}
		insertString := "INSERT INTO deliveryservice("
		insertString += "xml_id"
		insertString += ",active"
		insertString += ",dscp"
		insertString += ",signed"
		insertString += ",qstring_ignore"
		insertString += ",geo_limit"
		insertString += ",http_bypass_fqdn"
		insertString += ",dns_bypass_ip"
		insertString += ",dns_bypass_ip6"
		insertString += ",dns_bypass_ttl"
		insertString += ",org_server_fqdn"
		insertString += ",type"
		insertString += ",profile"
		insertString += ",cdn_id"
		insertString += ",ccr_dns_ttl"
		insertString += ",global_max_mbps"
		insertString += ",global_max_tps"
		insertString += ",long_desc"
		insertString += ",long_desc_1"
		insertString += ",long_desc_2"
		insertString += ",max_dns_answers"
		insertString += ",info_url"
		insertString += ",miss_lat"
		insertString += ",miss_long"
		insertString += ",check_path"
		insertString += ",protocol"
		insertString += ",ssl_key_version"
		insertString += ",ipv6_routing_enabled"
		insertString += ",range_request_handling"
		insertString += ",edge_header_rewrite"
		insertString += ",origin_shield"
		insertString += ",mid_header_rewrite"
		insertString += ",regex_remap"
		insertString += ",cacheurl"
		insertString += ",remap_text"
		insertString += ",multi_site_origin"
		insertString += ",display_name"
		insertString += ",tr_response_headers"
		insertString += ",initial_dispersion"
		insertString += ",dns_bypass_cname"
		insertString += ",tr_request_headers"
		insertString += ") VALUES ("
		insertString += ":xml_id"
		insertString += ",:active"
		insertString += ",:dscp"
		insertString += ",:signed"
		insertString += ",:qstring_ignore"
		insertString += ",:geo_limit"
		insertString += ",:http_bypass_fqdn"
		insertString += ",:dns_bypass_ip"
		insertString += ",:dns_bypass_ip6"
		insertString += ",:dns_bypass_ttl"
		insertString += ",:org_server_fqdn"
		insertString += ",:type"
		insertString += ",:profile"
		insertString += ",:cdn_id"
		insertString += ",:ccr_dns_ttl"
		insertString += ",:global_max_mbps"
		insertString += ",:global_max_tps"
		insertString += ",:long_desc"
		insertString += ",:long_desc_1"
		insertString += ",:long_desc_2"
		insertString += ",:max_dns_answers"
		insertString += ",:info_url"
		insertString += ",:miss_lat"
		insertString += ",:miss_long"
		insertString += ",:check_path"
		insertString += ",:protocol"
		insertString += ",:ssl_key_version"
		insertString += ",:ipv6_routing_enabled"
		insertString += ",:range_request_handling"
		insertString += ",:edge_header_rewrite"
		insertString += ",:origin_shield"
		insertString += ",:mid_header_rewrite"
		insertString += ",:regex_remap"
		insertString += ",:cacheurl"
		insertString += ",:remap_text"
		insertString += ",:multi_site_origin"
		insertString += ",:display_name"
		insertString += ",:tr_response_headers"
		insertString += ",:initial_dispersion"
		insertString += ",:dns_bypass_cname"
		insertString += ",:tr_request_headers"
		insertString += ")"
		result, err := globalDB.NamedExec(insertString, v)
		if err != nil {
			fmt.Println(err)
			return nil, err
		}
		return result.LastInsertId()
	}
	return nil, nil
}
