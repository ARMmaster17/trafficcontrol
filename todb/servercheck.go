// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_goto2.go (add link), as a start
// of the Traffic Ops golang data model

package todb

import (
	"encoding/json"
	"fmt"
	"gopkg.in/guregu/null.v3"
	"time"
)

type Servercheck struct {
	Id          int64     `db:"id" json:"id"`
	Server      int64     `db:"server" json:"server"`
	Aa          null.Int  `db:"aa" json:"aa"`
	Ab          null.Int  `db:"ab" json:"ab"`
	Ac          null.Int  `db:"ac" json:"ac"`
	Ad          null.Int  `db:"ad" json:"ad"`
	Ae          null.Int  `db:"ae" json:"ae"`
	Af          null.Int  `db:"af" json:"af"`
	Ag          null.Int  `db:"ag" json:"ag"`
	Ah          null.Int  `db:"ah" json:"ah"`
	Ai          null.Int  `db:"ai" json:"ai"`
	Aj          null.Int  `db:"aj" json:"aj"`
	Ak          null.Int  `db:"ak" json:"ak"`
	Al          null.Int  `db:"al" json:"al"`
	Am          null.Int  `db:"am" json:"am"`
	An          null.Int  `db:"an" json:"an"`
	Ao          null.Int  `db:"ao" json:"ao"`
	Ap          null.Int  `db:"ap" json:"ap"`
	Aq          null.Int  `db:"aq" json:"aq"`
	Ar          null.Int  `db:"ar" json:"ar"`
	As          null.Int  `db:"as" json:"as"`
	At          null.Int  `db:"at" json:"at"`
	Au          null.Int  `db:"au" json:"au"`
	Av          null.Int  `db:"av" json:"av"`
	Aw          null.Int  `db:"aw" json:"aw"`
	Ax          null.Int  `db:"ax" json:"ax"`
	Ay          null.Int  `db:"ay" json:"ay"`
	Az          null.Int  `db:"az" json:"az"`
	Ba          null.Int  `db:"ba" json:"ba"`
	Bb          null.Int  `db:"bb" json:"bb"`
	Bc          null.Int  `db:"bc" json:"bc"`
	Bd          null.Int  `db:"bd" json:"bd"`
	Be          null.Int  `db:"be" json:"be"`
	LastUpdated time.Time `db:"last_updated" json:"lastUpdated"`
}

func handleServercheck(method string, id int, payload []byte) (interface{}, error) {
	if method == "GET" {
		ret := []Servercheck{}
		if id >= 0 {
			err := globalDB.Select(&ret, "select * from servercheck where id=$1", id)
			if err != nil {
				fmt.Println(err)
				return nil, err
			}
		} else {
			queryStr := "select * from servercheck"
			err := globalDB.Select(&ret, queryStr)
			if err != nil {
				fmt.Println(err)
				return nil, err
			}
		}
		return ret, nil
	} else if method == "POST" {
		var v Asn
		err := json.Unmarshal(payload, &v)
		if err != nil {
			fmt.Println(err)
		}
		insertString := "INSERT INTO servercheck("
		insertString += "server"
		insertString += ",aa"
		insertString += ",ab"
		insertString += ",ac"
		insertString += ",ad"
		insertString += ",ae"
		insertString += ",af"
		insertString += ",ag"
		insertString += ",ah"
		insertString += ",ai"
		insertString += ",aj"
		insertString += ",ak"
		insertString += ",al"
		insertString += ",am"
		insertString += ",an"
		insertString += ",ao"
		insertString += ",ap"
		insertString += ",aq"
		insertString += ",ar"
		insertString += ",as"
		insertString += ",at"
		insertString += ",au"
		insertString += ",av"
		insertString += ",aw"
		insertString += ",ax"
		insertString += ",ay"
		insertString += ",az"
		insertString += ",ba"
		insertString += ",bb"
		insertString += ",bc"
		insertString += ",bd"
		insertString += ",be"
		insertString += ") VALUES ("
		insertString += ":server"
		insertString += ",:aa"
		insertString += ",:ab"
		insertString += ",:ac"
		insertString += ",:ad"
		insertString += ",:ae"
		insertString += ",:af"
		insertString += ",:ag"
		insertString += ",:ah"
		insertString += ",:ai"
		insertString += ",:aj"
		insertString += ",:ak"
		insertString += ",:al"
		insertString += ",:am"
		insertString += ",:an"
		insertString += ",:ao"
		insertString += ",:ap"
		insertString += ",:aq"
		insertString += ",:ar"
		insertString += ",:as"
		insertString += ",:at"
		insertString += ",:au"
		insertString += ",:av"
		insertString += ",:aw"
		insertString += ",:ax"
		insertString += ",:ay"
		insertString += ",:az"
		insertString += ",:ba"
		insertString += ",:bb"
		insertString += ",:bc"
		insertString += ",:bd"
		insertString += ",:be"
		insertString += ")"
		result, err := globalDB.NamedExec(insertString, v)
		if err != nil {
			fmt.Println(err)
			return nil, err
		}
		return result.LastInsertId()
	}
	return nil, nil
}
