// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_goto2.go (add link), as a start
// of the Traffic Ops golang data model

package todb

import (
	"encoding/json"
	"fmt"
	"gopkg.in/guregu/null.v3"
	"time"
)

type TmUser struct {
	Id                 int64       `db:"id" json:"id"`
	Username           null.String `db:"username" json:"username"`
	Role               null.Int    `db:"role" json:"role"`
	Uid                null.Int    `db:"uid" json:"uid"`
	Gid                null.Int    `db:"gid" json:"gid"`
	LocalPasswd        null.String `db:"local_passwd" json:"localPasswd"`
	ConfirmLocalPasswd null.String `db:"confirm_local_passwd" json:"confirmLocalPasswd"`
	LastUpdated        time.Time   `db:"last_updated" json:"lastUpdated"`
	Company            null.String `db:"company" json:"company"`
	Email              null.String `db:"email" json:"email"`
	FullName           null.String `db:"full_name" json:"fullName"`
	NewUser            int64       `db:"new_user" json:"newUser"`
	AddressLine1       null.String `db:"address_line1" json:"addressLine1"`
	AddressLine2       null.String `db:"address_line2" json:"addressLine2"`
	City               null.String `db:"city" json:"city"`
	StateOrProvince    null.String `db:"state_or_province" json:"stateOrProvince"`
	PhoneNumber        null.String `db:"phone_number" json:"phoneNumber"`
	PostalCode         null.String `db:"postal_code" json:"postalCode"`
	Country            null.String `db:"country" json:"country"`
	LocalUser          int64       `db:"local_user" json:"localUser"`
	Token              null.String `db:"token" json:"token"`
	RegistrationSent   time.Time   `db:"registration_sent" json:"registrationSent"`
}

func handleTmUser(method string, id int, payload []byte) (interface{}, error) {
	if method == "GET" {
		ret := []TmUser{}
		if id >= 0 {
			err := globalDB.Select(&ret, "select * from tm_user where id=$1", id)
			if err != nil {
				fmt.Println(err)
				return nil, err
			}
		} else {
			queryStr := "select * from tm_user"
			err := globalDB.Select(&ret, queryStr)
			if err != nil {
				fmt.Println(err)
				return nil, err
			}
		}
		return ret, nil
	} else if method == "POST" {
		var v Asn
		err := json.Unmarshal(payload, &v)
		if err != nil {
			fmt.Println(err)
		}
		insertString := "INSERT INTO tm_user("
		insertString += "username"
		insertString += ",role"
		insertString += ",uid"
		insertString += ",gid"
		insertString += ",local_passwd"
		insertString += ",confirm_local_passwd"
		insertString += ",company"
		insertString += ",email"
		insertString += ",full_name"
		insertString += ",new_user"
		insertString += ",address_line1"
		insertString += ",address_line2"
		insertString += ",city"
		insertString += ",state_or_province"
		insertString += ",phone_number"
		insertString += ",postal_code"
		insertString += ",country"
		insertString += ",local_user"
		insertString += ",token"
		insertString += ",registration_sent"
		insertString += ") VALUES ("
		insertString += ":username"
		insertString += ",:role"
		insertString += ",:uid"
		insertString += ",:gid"
		insertString += ",:local_passwd"
		insertString += ",:confirm_local_passwd"
		insertString += ",:company"
		insertString += ",:email"
		insertString += ",:full_name"
		insertString += ",:new_user"
		insertString += ",:address_line1"
		insertString += ",:address_line2"
		insertString += ",:city"
		insertString += ",:state_or_province"
		insertString += ",:phone_number"
		insertString += ",:postal_code"
		insertString += ",:country"
		insertString += ",:local_user"
		insertString += ",:token"
		insertString += ",:registration_sent"
		insertString += ")"
		result, err := globalDB.NamedExec(insertString, v)
		if err != nil {
			fmt.Println(err)
			return nil, err
		}
		return result.LastInsertId()
	}
	return nil, nil
}
