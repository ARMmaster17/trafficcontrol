// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_goto2.go (add link), as a start
// of the Traffic Ops golang data model

package todb

import (
	"encoding/json"
	"fmt"
	"gopkg.in/guregu/null.v3"
	"time"
)

type TmUser struct {
	Id                 int64       `db:"id" json:"id"`
	Username           null.String `db:"username" json:"username"`
	Role               null.Int    `db:"role" json:"role"`
	Uid                null.Int    `db:"uid" json:"uid"`
	Gid                null.Int    `db:"gid" json:"gid"`
	LocalPasswd        null.String `db:"local_passwd" json:"localPasswd"`
	ConfirmLocalPasswd null.String `db:"confirm_local_passwd" json:"confirmLocalPasswd"`
	LastUpdated        time.Time   `db:"last_updated" json:"lastUpdated"`
	Company            null.String `db:"company" json:"company"`
	Email              null.String `db:"email" json:"email"`
	FullName           null.String `db:"full_name" json:"fullName"`
	NewUser            int64       `db:"new_user" json:"newUser"`
	AddressLine1       null.String `db:"address_line1" json:"addressLine1"`
	AddressLine2       null.String `db:"address_line2" json:"addressLine2"`
	City               null.String `db:"city" json:"city"`
	StateOrProvince    null.String `db:"state_or_province" json:"stateOrProvince"`
	PhoneNumber        null.String `db:"phone_number" json:"phoneNumber"`
	PostalCode         null.String `db:"postal_code" json:"postalCode"`
	Country            null.String `db:"country" json:"country"`
	LocalUser          int64       `db:"local_user" json:"localUser"`
	Token              null.String `db:"token" json:"token"`
	RegistrationSent   time.Time   `db:"registration_sent" json:"registrationSent"`
}

func handleTmUser(method string, id int, payload []byte) (interface{}, error) {
	if method == "GET" {
		return getTmUser(id)
	} else if method == "POST" {
		return postTmUser(payload)
	} else if method == "PUT" {
		return putTmUser(id, payload)
	} else if method == "DELETE" {
		return delTmUser(id)
	}
	return nil, nil
}

func getTmUser(id int) (interface{}, error) {
	ret := []TmUser{}
	if id >= 0 {
		err := globalDB.Select(&ret, "select * from tm_user where id=$1", id)
		if err != nil {
			fmt.Println(err)
			return nil, err
		}
	} else {
		queryStr := "select * from tm_user"
		err := globalDB.Select(&ret, queryStr)
		if err != nil {
			fmt.Println(err)
			return nil, err
		}
	}
	return ret, nil
}

func postTmUser(payload []byte) (interface{}, error) {
	var v Asn
	err := json.Unmarshal(payload, &v)
	if err != nil {
		fmt.Println(err)
	}
	sqlString := "INSERT INTO tm_user("
	sqlString += "username"
	sqlString += ",role"
	sqlString += ",uid"
	sqlString += ",gid"
	sqlString += ",local_passwd"
	sqlString += ",confirm_local_passwd"
	sqlString += ",company"
	sqlString += ",email"
	sqlString += ",full_name"
	sqlString += ",new_user"
	sqlString += ",address_line1"
	sqlString += ",address_line2"
	sqlString += ",city"
	sqlString += ",state_or_province"
	sqlString += ",phone_number"
	sqlString += ",postal_code"
	sqlString += ",country"
	sqlString += ",local_user"
	sqlString += ",token"
	sqlString += ",registration_sent"
	sqlString += ") VALUES ("
	sqlString += ":username"
	sqlString += ",:role"
	sqlString += ",:uid"
	sqlString += ",:gid"
	sqlString += ",:local_passwd"
	sqlString += ",:confirm_local_passwd"
	sqlString += ",:company"
	sqlString += ",:email"
	sqlString += ",:full_name"
	sqlString += ",:new_user"
	sqlString += ",:address_line1"
	sqlString += ",:address_line2"
	sqlString += ",:city"
	sqlString += ",:state_or_province"
	sqlString += ",:phone_number"
	sqlString += ",:postal_code"
	sqlString += ",:country"
	sqlString += ",:local_user"
	sqlString += ",:token"
	sqlString += ",:registration_sent"
	sqlString += ")"
	result, err := globalDB.NamedExec(sqlString, v)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	return result, err
}

func putTmUser(id int, payload []byte) (interface{}, error) {
	// Note this depends on the json having the correct id!
	var v Asn
	err := json.Unmarshal(payload, &v)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	v.LastUpdated = time.Now()
	sqlString := "UPDATE tm_user SET "
	sqlString += "username = :username"
	sqlString += ",role = :role"
	sqlString += ",uid = :uid"
	sqlString += ",gid = :gid"
	sqlString += ",local_passwd = :local_passwd"
	sqlString += ",confirm_local_passwd = :confirm_local_passwd"
	sqlString += ",last_updated = :last_updated"
	sqlString += ",company = :company"
	sqlString += ",email = :email"
	sqlString += ",full_name = :full_name"
	sqlString += ",new_user = :new_user"
	sqlString += ",address_line1 = :address_line1"
	sqlString += ",address_line2 = :address_line2"
	sqlString += ",city = :city"
	sqlString += ",state_or_province = :state_or_province"
	sqlString += ",phone_number = :phone_number"
	sqlString += ",postal_code = :postal_code"
	sqlString += ",country = :country"
	sqlString += ",local_user = :local_user"
	sqlString += ",token = :token"
	sqlString += ",registration_sent = :registration_sent"
	sqlString += " WHERE id=:id"
	result, err := globalDB.NamedExec(sqlString, v)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	return result, err
}

func delTmUser(id int) (interface{}, error) {
	result, err := globalDB.Exec("DELETE FROM tm_user WHERE id=$1", id)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	return result, err
}
