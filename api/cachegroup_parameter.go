// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_to_start.go (add link), as a start
// of the Traffic Ops golang data model

package api

import (
	"encoding/json"
	_ "github.com/Comcast/traffic_control/traffic_ops/experimental/server/output_format" // needed for swagger
	"github.com/jmoiron/sqlx"
	"log"
	"time"
)

type CachegroupParameter struct {
	Cachegroup  int64     `db:"cachegroup" json:"cachegroup"`
	Parameter   int64     `db:"parameter" json:"parameter"`
	LastUpdated time.Time `db:"last_updated" json:"lastUpdated"`
}

// @Title getCachegroupParameterById
// @Description retrieves the cachegroup_parameter information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    CachegroupParameter
// @Resource /api/2.0
// @Router /api/2.0/cachegroup_parameter/{id} [get]
func getCachegroupParameterById(id int, db *sqlx.DB) (interface{}, error) {
	ret := []CachegroupParameter{}
	arg := CachegroupParameter{Cachegroup: int64(id)}
	nstmt, err := db.PrepareNamed(`select * from cachegroup_parameter where cachegroup=:cachegroup`)
	err = nstmt.Select(&ret, arg)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	nstmt.Close()
	return ret, nil
}

// @Title getCachegroupParameters
// @Description retrieves the cachegroup_parameter information for a certain id
// @Accept  application/json
// @Success 200 {array}    CachegroupParameter
// @Resource /api/2.0
// @Router /api/2.0/cachegroup_parameter [get]
func getCachegroupParameters(db *sqlx.DB) (interface{}, error) {
	ret := []CachegroupParameter{}
	queryStr := "select * from cachegroup_parameter"
	err := db.Select(&ret, queryStr)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return ret, nil
}

// @Title postCachegroupParameter
// @Description enter a new cachegroup_parameter
// @Accept  application/json
// @Param                 Body body     CachegroupParameter   true "CachegroupParameter object that should be added to the table"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/cachegroup_parameter [post]
func postCachegroupParameter(payload []byte, db *sqlx.DB) (interface{}, error) {
	var v CachegroupParameter
	err := json.Unmarshal(payload, &v)
	if err != nil {
		log.Println(err)
	}
	sqlString := "INSERT INTO cachegroup_parameter("
	sqlString += "cachegroup"
	sqlString += ",parameter"
	sqlString += ") VALUES ("
	sqlString += ":cachegroup"
	sqlString += ",:parameter"
	sqlString += ")"
	result, err := db.NamedExec(sqlString, v)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}

// @Title putCachegroupParameter
// @Description modify an existing cachegroup_parameterentry
// @Accept  application/json
// @Param   id              path    int     true        "The row id"
// @Param                 Body body     CachegroupParameter   true "CachegroupParameter object that should be added to the table"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/cachegroup_parameter/{id}  [put]
func putCachegroupParameter(id int, payload []byte, db *sqlx.DB) (interface{}, error) {
	var v CachegroupParameter
	err := json.Unmarshal(payload, &v)
	v.Cachegroup = int64(id) // overwrite the id in the payload
	if err != nil {
		log.Println(err)
		return nil, err
	}
	v.LastUpdated = time.Now()
	sqlString := "UPDATE cachegroup_parameter SET "
	sqlString += "cachegroup = :cachegroup"
	sqlString += ",parameter = :parameter"
	sqlString += ",last_updated = :last_updated"
	sqlString += " WHERE cachegroup=:cachegroup"
	result, err := db.NamedExec(sqlString, v)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}

// @Title delCachegroupParameterById
// @Description deletes cachegroup_parameter information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    CachegroupParameter
// @Resource /api/2.0
// @Router /api/2.0/cachegroup_parameter/{id} [delete]
func delCachegroupParameter(id int, db *sqlx.DB) (interface{}, error) {
	arg := CachegroupParameter{Cachegroup: int64(id)}
	result, err := db.NamedExec("DELETE FROM cachegroup_parameter WHERE id=:id", arg)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}
