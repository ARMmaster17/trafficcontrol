// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_goto2.go (add link), as a start
// of the Traffic Ops golang data model

package api

import (
	"encoding/json"
	"fmt"
	"github.com/Comcast/traffic_control/traffic_ops/goto2/db"
	_ "github.com/Comcast/traffic_control/traffic_ops/goto2/output_format"
	null "gopkg.in/guregu/null.v3"
	"time"
)

type Cachegroup struct {
	Id                 int64      `db:"id" json:"id"`
	Name               string     `db:"name" json:"name"`
	ShortName          string     `db:"short_name" json:"shortName"`
	Latitude           null.Float `db:"latitude" json:"latitude"`
	Longitude          null.Float `db:"longitude" json:"longitude"`
	ParentCachegroupId null.Int   `db:"parent_cachegroup_id" json:"parentCachegroupId"`
	Type               int64      `db:"type" json:"type"`
	LastUpdated        time.Time  `db:"last_updated" json:"lastUpdated"`
}

func handleCachegroup(method string, id int, payload []byte) (interface{}, error) {
	if method == "GET" {
		return getCachegroup(id)
	} else if method == "POST" {
		return postCachegroup(payload)
	} else if method == "PUT" {
		return putCachegroup(id, payload)
	} else if method == "DELETE" {
		return delCachegroup(id)
	}
	return nil, nil
}

// @Title getCachegroup
// @Description retrieves cachegroup information
// @Accept  application/json
// @Param   id              path    int     false        "cachegroup id"
// @Success 200 {array}    Cachegroup
// @Resource /api/2.0
// @Router /api/2.0/cachegroup/{id} [get]
func getCachegroup(id int) (interface{}, error) {
	ret := []Cachegroup{}
	arg := Cachegroup{Id: int64(id)}
	if id >= 0 {
		nstmt, err := db.GlobalDB.PrepareNamed(`select * from cachegroup where id=:id`)
		err = nstmt.Select(&ret, arg)
		if err != nil {
			fmt.Println(err)
			return nil, err
		}
		nstmt.Close()
	} else {
		queryStr := "select * from cachegroup"
		err := db.GlobalDB.Select(&ret, queryStr)
		if err != nil {
			fmt.Println(err)
			return nil, err
		}
	}
	return ret, nil
}

// @Title postCachegroup
// @Description enter a new cachegroup
// @Accept  application/json
// @Param   shortName           json    string       true        "cachegroup short name"
// @Param   name                json    string       true        "cachegroup name"
// @Param   longitude           json    null.Float   false       "Location longitude"
// @Param   latitide            json    null.Float   false       "Location latitiude"
// @Param   type                json    int          true        "CG type"
// @Param   parentCachegroupId  json    int          false       "Parent cachegroup id"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/cachegroup [post]
func postCachegroup(payload []byte) (interface{}, error) {
	var v Cachegroup
	err := json.Unmarshal(payload, &v)
	if err != nil {
		fmt.Println(err)
	}
	sqlString := "INSERT INTO cachegroup("
	sqlString += "name"
	sqlString += ",short_name"
	sqlString += ",latitude"
	sqlString += ",longitude"
	sqlString += ",parent_cachegroup_id"
	sqlString += ",type"
	sqlString += ") VALUES ("
	sqlString += ":name"
	sqlString += ",:short_name"
	sqlString += ",:latitude"
	sqlString += ",:longitude"
	sqlString += ",:parent_cachegroup_id"
	sqlString += ",:type"
	sqlString += ")"
	result, err := db.GlobalDB.NamedExec(sqlString, v)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	return result, err
}

// @Title putCachegroup
// @Description modify an existing cachegroup
// @Accept  json
// @Param   id                  path    int          true        "cachegroup id"
// @Param   shortName           json    string       true        "cachegroup short name"
// @Param   name                json    string       true        "cachegroup name"
// @Param   longitude           json    null.Float   false       "Location longitude"
// @Param   latitide            json    null.Float   false       "Location latitiude"
// @Param   type                json    int          true        "CG type"
// @Param   parentCachegroupId  json    int          false       "Parent cachegroup id"
// @Success 200 {array}    Cachegroup
// @Resource /api/2.0
// @Router /api/2.0/cachegroup/{id} [put]
func putCachegroup(id int, payload []byte) (interface{}, error) {
	var v Cachegroup
	err := json.Unmarshal(payload, &v)
	v.Id = int64(id) // overwrite the id in the payload
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	v.LastUpdated = time.Now()
	sqlString := "UPDATE cachegroup SET "
	sqlString += "name = :name"
	sqlString += ",short_name = :short_name"
	sqlString += ",latitude = :latitude"
	sqlString += ",longitude = :longitude"
	sqlString += ",parent_cachegroup_id = :parent_cachegroup_id"
	sqlString += ",type = :type"
	sqlString += ",last_updated = :last_updated"
	sqlString += " WHERE id=:id"
	result, err := db.GlobalDB.NamedExec(sqlString, v)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	return result, err
}

// @Title delCachegroup
// @Description deletes a cachegroup
// @Accept  json
// @Param   id              path    int     true        "cachegroup id"
// @Success 200 {array}    Cachegroup
// @Resource /api/2.0
// @Router /api/2.0/cachegroup/{id} [delete]
func delCachegroup(id int) (interface{}, error) {
	arg := Cachegroup{Id: int64(id)}
	result, err := db.GlobalDB.NamedExec("DELETE FROM cachegroup WHERE id=:id", arg)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	return result, err
}
