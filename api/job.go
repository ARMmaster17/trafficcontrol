// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_goto2.go (add link), as a start
// of the Traffic Ops golang data model

package api

import (
	"encoding/json"
	"github.com/Comcast/traffic_control/traffic_ops/goto2/db"
	_ "github.com/Comcast/traffic_control/traffic_ops/goto2/output_format" // needed for swagger
	null "gopkg.in/guregu/null.v3"
	"log"
	"time"
)

type Job struct {
	Id                 int64       `db:"id" json:"id"`
	Agent              null.Int    `db:"agent" json:"agent"`
	ObjectType         null.String `db:"object_type" json:"objectType"`
	ObjectName         null.String `db:"object_name" json:"objectName"`
	Keyword            string      `db:"keyword" json:"keyword"`
	Parameters         null.String `db:"parameters" json:"parameters"`
	AssetUrl           string      `db:"asset_url" json:"assetUrl"`
	AssetType          string      `db:"asset_type" json:"assetType"`
	Status             int64       `db:"status" json:"status"`
	StartTime          time.Time   `db:"start_time" json:"startTime"`
	EnteredTime        time.Time   `db:"entered_time" json:"enteredTime"`
	JobUser            int64       `db:"job_user" json:"jobUser"`
	LastUpdated        time.Time   `db:"last_updated" json:"lastUpdated"`
	JobDeliveryservice null.Int    `db:"job_deliveryservice" json:"jobDeliveryservice"`
}

func handleJob(method string, id int, payload []byte) (interface{}, error) {
	if method == "GET" {
		return getJob(id)
	} else if method == "POST" {
		return postJob(payload)
	} else if method == "PUT" {
		return putJob(id, payload)
	} else if method == "DELETE" {
		return delJob(id)
	}
	return nil, nil
}

func getJob(id int) (interface{}, error) {
	if id >= 0 {
		return getJobById(id)
	} else {
		return getJobs()
	}
}

// @Title getJobById
// @Description retrieves the job information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    Job
// @Resource /api/2.0
// @Router /api/2.0/job/{id} [get]
func getJobById(id int) (interface{}, error) {
	ret := []Job{}
	arg := Job{Id: int64(id)}
	nstmt, err := db.GlobalDB.PrepareNamed(`select * from job where id=:id`)
	err = nstmt.Select(&ret, arg)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	nstmt.Close()
	return ret, nil
}

// @Title getJobs
// @Description retrieves the job information for a certain id
// @Accept  application/json
// @Success 200 {array}    Job
// @Resource /api/2.0
// @Router /api/2.0/job [get]
func getJobs() (interface{}, error) {
	ret := []Job{}
	queryStr := "select * from job"
	err := db.GlobalDB.Select(&ret, queryStr)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return ret, nil
}

// @Title postJob
// @Description enter a new job
// @Accept  application/json
// @Param                 Body body     Job   true "Job object that should be added to the table"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/job [post]
func postJob(payload []byte) (interface{}, error) {
	var v Job
	err := json.Unmarshal(payload, &v)
	if err != nil {
		log.Println(err)
	}
	sqlString := "INSERT INTO job("
	sqlString += "agent"
	sqlString += ",object_type"
	sqlString += ",object_name"
	sqlString += ",keyword"
	sqlString += ",parameters"
	sqlString += ",asset_url"
	sqlString += ",asset_type"
	sqlString += ",status"
	sqlString += ",start_time"
	sqlString += ",entered_time"
	sqlString += ",job_user"
	sqlString += ",job_deliveryservice"
	sqlString += ") VALUES ("
	sqlString += ":agent"
	sqlString += ",:object_type"
	sqlString += ",:object_name"
	sqlString += ",:keyword"
	sqlString += ",:parameters"
	sqlString += ",:asset_url"
	sqlString += ",:asset_type"
	sqlString += ",:status"
	sqlString += ",:start_time"
	sqlString += ",:entered_time"
	sqlString += ",:job_user"
	sqlString += ",:job_deliveryservice"
	sqlString += ")"
	result, err := db.GlobalDB.NamedExec(sqlString, v)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}

// @Title putJob
// @Description modify an existing jobentry
// @Accept  application/json
// @Param   id              path    int     true        "The row id"
// @Param                 Body body     Job   true "Job object that should be added to the table"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/job/{id}  [put]
func putJob(id int, payload []byte) (interface{}, error) {
	var v Job
	err := json.Unmarshal(payload, &v)
	v.Id = int64(id) // overwrite the id in the payload
	if err != nil {
		log.Println(err)
		return nil, err
	}
	v.LastUpdated = time.Now()
	sqlString := "UPDATE job SET "
	sqlString += "agent = :agent"
	sqlString += ",object_type = :object_type"
	sqlString += ",object_name = :object_name"
	sqlString += ",keyword = :keyword"
	sqlString += ",parameters = :parameters"
	sqlString += ",asset_url = :asset_url"
	sqlString += ",asset_type = :asset_type"
	sqlString += ",status = :status"
	sqlString += ",start_time = :start_time"
	sqlString += ",entered_time = :entered_time"
	sqlString += ",job_user = :job_user"
	sqlString += ",last_updated = :last_updated"
	sqlString += ",job_deliveryservice = :job_deliveryservice"
	sqlString += " WHERE id=:id"
	result, err := db.GlobalDB.NamedExec(sqlString, v)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}

// @Title delJobById
// @Description deletes job information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    Job
// @Resource /api/2.0
// @Router /api/2.0/job/{id} [delete]
func delJob(id int) (interface{}, error) {
	arg := Job{Id: int64(id)}
	result, err := db.GlobalDB.NamedExec("DELETE FROM job WHERE id=:id", arg)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}
