// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_goto2.go (add link), as a start
// of the Traffic Ops golang data model

package api

import (
	"encoding/json"
	"fmt"
	"github.com/Comcast/traffic_control/traffic_ops/goto2/db"
	_ "github.com/Comcast/traffic_control/traffic_ops/goto2/output_format" // needed for swagger
	null "gopkg.in/guregu/null.v3"
	"time"
)

type PhysLocation struct {
	Id          int64       `db:"id" json:"id"`
	Name        string      `db:"name" json:"name"`
	ShortName   string      `db:"short_name" json:"shortName"`
	Address     string      `db:"address" json:"address"`
	City        string      `db:"city" json:"city"`
	State       string      `db:"state" json:"state"`
	Zip         string      `db:"zip" json:"zip"`
	Poc         null.String `db:"poc" json:"poc"`
	Phone       null.String `db:"phone" json:"phone"`
	Email       null.String `db:"email" json:"email"`
	Comments    null.String `db:"comments" json:"comments"`
	Region      int64       `db:"region" json:"region"`
	LastUpdated time.Time   `db:"last_updated" json:"lastUpdated"`
}

func handlePhysLocation(method string, id int, payload []byte) (interface{}, error) {
	if method == "GET" {
		return getPhysLocation(id)
	} else if method == "POST" {
		return postPhysLocation(payload)
	} else if method == "PUT" {
		return putPhysLocation(id, payload)
	} else if method == "DELETE" {
		return delPhysLocation(id)
	}
	return nil, nil
}

func getPhysLocation(id int) (interface{}, error) {
	if id >= 0 {
		return getPhysLocationById(id)
	} else {
		return getPhysLocations()
	}
}

// @Title getPhysLocationById
// @Description retrieves the phys_location information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    PhysLocation
// @Resource /api/2.0
// @Router /api/2.0/phys_location/{id} [get]
func getPhysLocationById(id int) (interface{}, error) {
	ret := []PhysLocation{}
	arg := PhysLocation{Id: int64(id)}
	nstmt, err := db.GlobalDB.PrepareNamed(`select * from phys_location where id=:id`)
	err = nstmt.Select(&ret, arg)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	nstmt.Close()
	return ret, nil
}

// @Title getPhysLocations
// @Description retrieves the phys_location information for a certain id
// @Accept  application/json
// @Success 200 {array}    PhysLocation
// @Resource /api/2.0
// @Router /api/2.0/phys_location [get]
func getPhysLocations() (interface{}, error) {
	ret := []PhysLocation{}
	queryStr := "select * from phys_location"
	err := db.GlobalDB.Select(&ret, queryStr)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	return ret, nil
}

// @Title postPhysLocation
// @Description enter a new phys_location
// @Accept  application/json
// @Param                 Body body     PhysLocation   true "PhysLocation object that should be added to the table"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/phys_location [post]
func postPhysLocation(payload []byte) (interface{}, error) {
	var v PhysLocation
	err := json.Unmarshal(payload, &v)
	if err != nil {
		fmt.Println(err)
	}
	sqlString := "INSERT INTO phys_location("
	sqlString += "name"
	sqlString += ",short_name"
	sqlString += ",address"
	sqlString += ",city"
	sqlString += ",state"
	sqlString += ",zip"
	sqlString += ",poc"
	sqlString += ",phone"
	sqlString += ",email"
	sqlString += ",comments"
	sqlString += ",region"
	sqlString += ") VALUES ("
	sqlString += ":name"
	sqlString += ",:short_name"
	sqlString += ",:address"
	sqlString += ",:city"
	sqlString += ",:state"
	sqlString += ",:zip"
	sqlString += ",:poc"
	sqlString += ",:phone"
	sqlString += ",:email"
	sqlString += ",:comments"
	sqlString += ",:region"
	sqlString += ")"
	result, err := db.GlobalDB.NamedExec(sqlString, v)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	return result, err
}

// @Title putPhysLocation
// @Description modify an existing phys_locationentry
// @Accept  application/json
// @Param   id              path    int     true        "The row id"
// @Param                 Body body     PhysLocation   true "PhysLocation object that should be added to the table"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/phys_location/{id}  [put]
func putPhysLocation(id int, payload []byte) (interface{}, error) {
	var v PhysLocation
	err := json.Unmarshal(payload, &v)
	v.Id = int64(id) // overwrite the id in the payload
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	v.LastUpdated = time.Now()
	sqlString := "UPDATE phys_location SET "
	sqlString += "name = :name"
	sqlString += ",short_name = :short_name"
	sqlString += ",address = :address"
	sqlString += ",city = :city"
	sqlString += ",state = :state"
	sqlString += ",zip = :zip"
	sqlString += ",poc = :poc"
	sqlString += ",phone = :phone"
	sqlString += ",email = :email"
	sqlString += ",comments = :comments"
	sqlString += ",region = :region"
	sqlString += ",last_updated = :last_updated"
	sqlString += " WHERE id=:id"
	result, err := db.GlobalDB.NamedExec(sqlString, v)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	return result, err
}

// @Title delPhysLocationById
// @Description deletes phys_location information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    PhysLocation
// @Resource /api/2.0
// @Router /api/2.0/phys_location/{id} [delete]
func delPhysLocation(id int) (interface{}, error) {
	arg := PhysLocation{Id: int64(id)}
	result, err := db.GlobalDB.NamedExec("DELETE FROM phys_location WHERE id=:id", arg)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	return result, err
}
