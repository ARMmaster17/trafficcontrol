// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_goto2.go (add link), as a start
// of the Traffic Ops golang data model

package api

import (
	"encoding/json"
	"fmt"
	"github.com/Comcast/traffic_control/traffic_ops/goto2/db"
	_ "github.com/Comcast/traffic_control/traffic_ops/goto2/output_format" // needed for swagger
	"time"
)

type FederationTmuser struct {
	Federation  int64     `db:"federation" json:"federation"`
	TmUser      int64     `db:"tm_user" json:"tmUser"`
	Role        int64     `db:"role" json:"role"`
	LastUpdated time.Time `db:"last_updated" json:"lastUpdated"`
}

func handleFederationTmuser(method string, id int, payload []byte) (interface{}, error) {
	if method == "GET" {
		return getFederationTmuser(id)
	} else if method == "POST" {
		return postFederationTmuser(payload)
	} else if method == "PUT" {
		return putFederationTmuser(id, payload)
	} else if method == "DELETE" {
		return delFederationTmuser(id)
	}
	return nil, nil
}

func getFederationTmuser(id int) (interface{}, error) {
	if id >= 0 {
		return getFederationTmuserById(id)
	} else {
		return getFederationTmusers()
	}
}

// @Title getFederationTmuserById
// @Description retrieves the federation_tmuser information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    FederationTmuser
// @Resource /api/2.0
// @Router /api/2.0/federation_tmuser/{id} [get]
func getFederationTmuserById(id int) (interface{}, error) {
	ret := []FederationTmuser{}
	arg := FederationTmuser{Federation: int64(id)}
	nstmt, err := db.GlobalDB.PrepareNamed(`select * from federation_tmuser where federation=:federation`)
	err = nstmt.Select(&ret, arg)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	nstmt.Close()
	return ret, nil
}

// @Title getFederationTmusers
// @Description retrieves the federation_tmuser information for a certain id
// @Accept  application/json
// @Success 200 {array}    FederationTmuser
// @Resource /api/2.0
// @Router /api/2.0/federation_tmuser [get]
func getFederationTmusers() (interface{}, error) {
	ret := []FederationTmuser{}
	queryStr := "select * from federation_tmuser"
	err := db.GlobalDB.Select(&ret, queryStr)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	return ret, nil
}

// @Title postFederationTmuser
// @Description enter a new federation_tmuser
// @Accept  application/json
// @Param           Federation json      int64   false "federation description"
// @Param               TmUser json      int64   false "tm_user description"
// @Param                 Role json      int64   false "role description"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/federation_tmuser [post]
func postFederationTmuser(payload []byte) (interface{}, error) {
	var v FederationTmuser
	err := json.Unmarshal(payload, &v)
	if err != nil {
		fmt.Println(err)
	}
	sqlString := "INSERT INTO federation_tmuser("
	sqlString += "federation"
	sqlString += ",tm_user"
	sqlString += ",role"
	sqlString += ") VALUES ("
	sqlString += ":federation"
	sqlString += ",:tm_user"
	sqlString += ",:role"
	sqlString += ")"
	result, err := db.GlobalDB.NamedExec(sqlString, v)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	return result, err
}

// @Title putFederationTmuser
// @Description modify an existing federation_tmuserentry
// @Accept  application/json
// @Param           Federation json      int64   false "federation description"
// @Param               TmUser json      int64   false "tm_user description"
// @Param                 Role json      int64   false "role description"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/federation_tmuser [put]
func putFederationTmuser(id int, payload []byte) (interface{}, error) {
	var v FederationTmuser
	err := json.Unmarshal(payload, &v)
	v.Federation = int64(id) // overwrite the id in the payload
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	v.LastUpdated = time.Now()
	sqlString := "UPDATE federation_tmuser SET "
	sqlString += "federation = :federation"
	sqlString += ",tm_user = :tm_user"
	sqlString += ",role = :role"
	sqlString += ",last_updated = :last_updated"
	sqlString += " WHERE federation=:federation"
	result, err := db.GlobalDB.NamedExec(sqlString, v)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	return result, err
}

// @Title delFederationTmuserById
// @Description deletes federation_tmuser information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    FederationTmuser
// @Resource /api/2.0
// @Router /api/2.0/federation_tmuser/{id} [delete]
func delFederationTmuser(id int) (interface{}, error) {
	arg := FederationTmuser{Federation: int64(id)}
	result, err := db.GlobalDB.NamedExec("DELETE FROM federation_tmuser WHERE id=:id", arg)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	return result, err
}
