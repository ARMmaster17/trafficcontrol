// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_goto2.go (add link), as a start
// of the Traffic Ops golang data model

package todb

import (
	"encoding/json"
	"fmt"
	"gopkg.in/guregu/null.v3"
	"time"
)

type Job struct {
	Id                 int64       `db:"id" json:"id"`
	Agent              null.Int    `db:"agent" json:"agent"`
	ObjectType         null.String `db:"object_type" json:"objectType"`
	ObjectName         null.String `db:"object_name" json:"objectName"`
	Keyword            string      `db:"keyword" json:"keyword"`
	Parameters         null.String `db:"parameters" json:"parameters"`
	AssetUrl           string      `db:"asset_url" json:"assetUrl"`
	AssetType          string      `db:"asset_type" json:"assetType"`
	Status             int64       `db:"status" json:"status"`
	StartTime          time.Time   `db:"start_time" json:"startTime"`
	EnteredTime        time.Time   `db:"entered_time" json:"enteredTime"`
	JobUser            int64       `db:"job_user" json:"jobUser"`
	LastUpdated        time.Time   `db:"last_updated" json:"lastUpdated"`
	JobDeliveryservice null.Int    `db:"job_deliveryservice" json:"jobDeliveryservice"`
}

func handleJob(method string, id int, payload []byte) (interface{}, error) {
	if method == "GET" {
		ret := []Job{}
		if id >= 0 {
			err := globalDB.Select(&ret, "select * from job where id=$1", id)
			if err != nil {
				fmt.Println(err)
				return nil, err
			}
		} else {
			queryStr := "select * from job"
			err := globalDB.Select(&ret, queryStr)
			if err != nil {
				fmt.Println(err)
				return nil, err
			}
		}
		return ret, nil
	} else if method == "POST" {
		var v Asn
		err := json.Unmarshal(payload, &v)
		if err != nil {
			fmt.Println(err)
		}
		insertString := "INSERT INTO job("
		insertString += "agent"
		insertString += ",object_type"
		insertString += ",object_name"
		insertString += ",keyword"
		insertString += ",parameters"
		insertString += ",asset_url"
		insertString += ",asset_type"
		insertString += ",status"
		insertString += ",start_time"
		insertString += ",entered_time"
		insertString += ",job_user"
		insertString += ",job_deliveryservice"
		insertString += ") VALUES ("
		insertString += ":agent"
		insertString += ",:object_type"
		insertString += ",:object_name"
		insertString += ",:keyword"
		insertString += ",:parameters"
		insertString += ",:asset_url"
		insertString += ",:asset_type"
		insertString += ",:status"
		insertString += ",:start_time"
		insertString += ",:entered_time"
		insertString += ",:job_user"
		insertString += ",:job_deliveryservice"
		insertString += ")"
		result, err := globalDB.NamedExec(insertString, v)
		if err != nil {
			fmt.Println(err)
			return nil, err
		}
		return result.LastInsertId()
	}
	return nil, nil
}
