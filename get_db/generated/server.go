// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_goto2.go (add link), as a start
// of the Traffic Ops golang data model

package todb

import (
	"encoding/json"
	"fmt"
	"gopkg.in/guregu/null.v3"
	"time"
)

type Server struct {
	Id             int64       `db:"id" json:"id"`
	HostName       string      `db:"host_name" json:"hostName"`
	DomainName     string      `db:"domain_name" json:"domainName"`
	TcpPort        null.Int    `db:"tcp_port" json:"tcpPort"`
	XmppId         null.String `db:"xmpp_id" json:"xmppId"`
	XmppPasswd     null.String `db:"xmpp_passwd" json:"xmppPasswd"`
	InterfaceName  string      `db:"interface_name" json:"interfaceName"`
	IpAddress      string      `db:"ip_address" json:"ipAddress"`
	IpNetmask      string      `db:"ip_netmask" json:"ipNetmask"`
	IpGateway      string      `db:"ip_gateway" json:"ipGateway"`
	Ip6Address     null.String `db:"ip6_address" json:"ip6Address"`
	Ip6Gateway     null.String `db:"ip6_gateway" json:"ip6Gateway"`
	InterfaceMtu   int64       `db:"interface_mtu" json:"interfaceMtu"`
	PhysLocation   int64       `db:"phys_location" json:"physLocation"`
	Rack           null.String `db:"rack" json:"rack"`
	Cachegroup     int64       `db:"cachegroup" json:"cachegroup"`
	Type           int64       `db:"type" json:"type"`
	Status         int64       `db:"status" json:"status"`
	UpdPending     int64       `db:"upd_pending" json:"updPending"`
	Profile        int64       `db:"profile" json:"profile"`
	CdnId          int64       `db:"cdn_id" json:"cdnId"`
	MgmtIpAddress  null.String `db:"mgmt_ip_address" json:"mgmtIpAddress"`
	MgmtIpNetmask  null.String `db:"mgmt_ip_netmask" json:"mgmtIpNetmask"`
	MgmtIpGateway  null.String `db:"mgmt_ip_gateway" json:"mgmtIpGateway"`
	IloIpAddress   null.String `db:"ilo_ip_address" json:"iloIpAddress"`
	IloIpNetmask   null.String `db:"ilo_ip_netmask" json:"iloIpNetmask"`
	IloIpGateway   null.String `db:"ilo_ip_gateway" json:"iloIpGateway"`
	IloUsername    null.String `db:"ilo_username" json:"iloUsername"`
	IloPassword    null.String `db:"ilo_password" json:"iloPassword"`
	RouterHostName null.String `db:"router_host_name" json:"routerHostName"`
	RouterPortName null.String `db:"router_port_name" json:"routerPortName"`
	LastUpdated    time.Time   `db:"last_updated" json:"lastUpdated"`
}

func handleServer(method string, id int, payload []byte) (interface{}, error) {
	if method == "GET" {
		ret := []Server{}
		if id >= 0 {
			err := globalDB.Select(&ret, "select * from server where id=$1", id)
			if err != nil {
				fmt.Println(err)
				return nil, err
			}
		} else {
			queryStr := "select * from server"
			err := globalDB.Select(&ret, queryStr)
			if err != nil {
				fmt.Println(err)
				return nil, err
			}
		}
		return ret, nil
	} else if method == "POST" {
		var v Asn
		err := json.Unmarshal(payload, &v)
		if err != nil {
			fmt.Println(err)
		}
		insertString := "INSERT INTO server("
		insertString += "host_name"
		insertString += ",domain_name"
		insertString += ",tcp_port"
		insertString += ",xmpp_id"
		insertString += ",xmpp_passwd"
		insertString += ",interface_name"
		insertString += ",ip_address"
		insertString += ",ip_netmask"
		insertString += ",ip_gateway"
		insertString += ",ip6_address"
		insertString += ",ip6_gateway"
		insertString += ",interface_mtu"
		insertString += ",phys_location"
		insertString += ",rack"
		insertString += ",cachegroup"
		insertString += ",type"
		insertString += ",status"
		insertString += ",upd_pending"
		insertString += ",profile"
		insertString += ",cdn_id"
		insertString += ",mgmt_ip_address"
		insertString += ",mgmt_ip_netmask"
		insertString += ",mgmt_ip_gateway"
		insertString += ",ilo_ip_address"
		insertString += ",ilo_ip_netmask"
		insertString += ",ilo_ip_gateway"
		insertString += ",ilo_username"
		insertString += ",ilo_password"
		insertString += ",router_host_name"
		insertString += ",router_port_name"
		insertString += ") VALUES ("
		insertString += ":host_name"
		insertString += ",:domain_name"
		insertString += ",:tcp_port"
		insertString += ",:xmpp_id"
		insertString += ",:xmpp_passwd"
		insertString += ",:interface_name"
		insertString += ",:ip_address"
		insertString += ",:ip_netmask"
		insertString += ",:ip_gateway"
		insertString += ",:ip6_address"
		insertString += ",:ip6_gateway"
		insertString += ",:interface_mtu"
		insertString += ",:phys_location"
		insertString += ",:rack"
		insertString += ",:cachegroup"
		insertString += ",:type"
		insertString += ",:status"
		insertString += ",:upd_pending"
		insertString += ",:profile"
		insertString += ",:cdn_id"
		insertString += ",:mgmt_ip_address"
		insertString += ",:mgmt_ip_netmask"
		insertString += ",:mgmt_ip_gateway"
		insertString += ",:ilo_ip_address"
		insertString += ",:ilo_ip_netmask"
		insertString += ",:ilo_ip_gateway"
		insertString += ",:ilo_username"
		insertString += ",:ilo_password"
		insertString += ",:router_host_name"
		insertString += ",:router_port_name"
		insertString += ")"
		result, err := globalDB.NamedExec(insertString, v)
		if err != nil {
			fmt.Println(err)
			return nil, err
		}
		return result.LastInsertId()
	}
	return nil, nil
}
